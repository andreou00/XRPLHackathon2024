// SPDX-License-Identifier: MIT

//     XRPL Tech Odyssey 2024 Hackathon
//
//     Author: Konstantinos Andreou 
//
//     The following code  aims to solve a specific use case related to the secure transfer of XRP
//     between two parties while incorporating a secret number for additional authentication. 
//     It prevents loosing funds due to missed typed wallet address.
//

pragma solidity ^0.8.0;

contract InsurXRP {
    struct Transfer {
        address payable sender;
        address payable receiver;
        uint256 amount;
        uint256 secret;
        bool claimed;
    }

    mapping(address => Transfer) public transfers;

    event EtherSent(address indexed sender, address indexed receiver, uint256 amount);
    event EtherClaimed(address indexed sender, address indexed receiver, uint256 amount);
    event EtherClaimedBack(address indexed sender, address indexed receiver, uint256 amount);

    modifier onlySender() {
        require(msg.sender == transfers[msg.sender].sender, "Only sender can call this function");
        _;
    }

    modifier notClaimed() {
        require(!transfers[msg.sender].claimed, "Transfer has already been claimed");
        _;
    }

    function sendXRP(address payable receiver, uint256 secret) external payable {
        transfers[msg.sender] = Transfer({
            sender: payable(msg.sender),
            receiver: receiver,
            amount: msg.value,
            secret: secret,
            claimed: false
        });

        emit EtherSent(msg.sender, receiver, msg.value);
    }

    function claimXRP(address senderAddr, uint256 providedSecret) external notClaimed {
        require(providedSecret == transfers[senderAddr].secret, "Incorrect secret provided");
        require(msg.sender == transfers[senderAddr].receiver, "You are not the intended receiver");

        transfers[senderAddr].claimed = true;
        transfers[senderAddr].receiver.transfer(transfers[senderAddr].amount);

        emit EtherClaimed(transfers[senderAddr].sender, msg.sender, transfers[senderAddr].amount);
    }

    function claimBackXRP() external onlySender notClaimed {
        transfers[msg.sender].claimed = true;
        transfers[msg.sender].sender.transfer(transfers[msg.sender].amount);

        emit EtherClaimedBack(transfers[msg.sender].sender, msg.sender, transfers[msg.sender].amount);
    }
}
